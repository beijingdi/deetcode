#remember to pop the added parenthesis after the recursion is called.
#this is important for all back-tracking
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        stack = []
        ans = []
        def backtrack(left,right,n):
            if left == n and right == n:
                ans.append("".join(stack))
                return
            if left < n:
                stack.append("(")
                backtrack(left + 1, right, n)
                stack.pop()
            if right < left:
                stack.append(")")
                backtrack(left, right + 1, n)
                stack.pop()
        backtrack(0,0,n)
        return ans